package com.example.mindwell.app.data.network.interceptors

import android.util.Log
import com.example.mindwell.app.data.datasources.local.TokenStorage
import kotlinx.coroutines.runBlocking
import okhttp3.Interceptor
import okhttp3.Response
import javax.inject.Inject

/**
 * Interceptor para adicionar token JWT nos cabe√ßalhos das requisi√ß√µes.
 */
class AuthInterceptor @Inject constructor(
    private val tokenStorage: TokenStorage
) : Interceptor {
    override fun intercept(chain: Interceptor.Chain): Response {
        val originalRequest = chain.request()
        
        Log.d("AuthInterceptor", "üîç Interceptando requisi√ß√£o: ${originalRequest.url}")
        
        // Ignora rotas de autentica√ß√£o que n√£o precisam de token
        if (originalRequest.url.encodedPath.contains("auth/mobile")) {
            Log.d("AuthInterceptor", "‚è≠Ô∏è Ignorando rota de auth: ${originalRequest.url}")
            return chain.proceed(originalRequest)
        }
        
        // Obt√©m o token JWT armazenado
        val token = runBlocking { 
            try {
                tokenStorage.getJwtToken()
            } catch (e: Exception) {
                Log.e("AuthInterceptor", "‚ùå Erro ao obter token: ${e.message}", e)
                null
            }
        }
        
        Log.d("AuthInterceptor", "üîë Token obtido: ${if (token != null) "Token presente (${token.take(20)}...)" else "Token ausente"}")
        
        return if (token != null) {
            // Adiciona o token no cabe√ßalho de autentica√ß√£o
            val newRequest = originalRequest.newBuilder()
                .header("Authorization", "Bearer $token")
                .build()
            Log.d("AuthInterceptor", "‚úÖ Header Authorization adicionado √† requisi√ß√£o")
            Log.d("AuthInterceptor", "üîç JWT completo enviado: $token")
            chain.proceed(newRequest)
        } else {
            // Se n√£o tiver token, prossegue com a requisi√ß√£o original
            Log.w("AuthInterceptor", "‚ö†Ô∏è Requisi√ß√£o enviada sem token de autentica√ß√£o")
            chain.proceed(originalRequest)
        }
    }
} 