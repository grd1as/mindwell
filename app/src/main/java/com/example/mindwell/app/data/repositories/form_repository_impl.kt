package com.example.mindwell.app.data.repositories

import android.util.Log
import com.example.mindwell.app.data.datasources.remote.FormRemoteDataSource
import com.example.mindwell.app.data.mappers.FormMapper
import com.example.mindwell.app.data.model.FormResponseRequest
import com.example.mindwell.app.domain.entities.Answer
import com.example.mindwell.app.domain.entities.Form
import com.example.mindwell.app.domain.entities.FormDetail
import com.example.mindwell.app.domain.repositories.FormRepository
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Implementa√ß√£o do reposit√≥rio de formul√°rios.
 */
@Singleton
class FormRepositoryImpl @Inject constructor(
    private val remote_data_source: FormRemoteDataSource
) : FormRepository {
    private val TAG = "FormRepository"

    /**
     * Obt√©m a lista de formul√°rios dispon√≠veis.
     * @param type Tipo opcional de formul√°rio para filtrar
     * @return Lista de formul√°rios
     */
    override suspend fun get_forms(type: String?): List<Form> {
        Log.d(TAG, "üåê Tentando buscar formul√°rios da API... Tipo: $type")
        try {
            val form_dtos = remote_data_source.get_forms(type)
            Log.d(TAG, "‚úÖ Sucesso na busca de formul√°rios da API. Quantidade: ${form_dtos.size}")
            return FormMapper.mapToDomain(form_dtos)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro na busca de formul√°rios da API: ${e.message}")
            throw e
        }
    }
    
    /**
     * Obt√©m os detalhes de um formul√°rio espec√≠fico.
     * @param form_id ID do formul√°rio
     * @return Detalhes do formul√°rio com perguntas
     */
    override suspend fun get_form_detail(form_id: Int): FormDetail {
        Log.d(TAG, "üåê Tentando buscar detalhes do formul√°rio da API... ID: $form_id")
        try {
            val form_detail_dto = remote_data_source.get_form_detail(form_id)
            Log.d(TAG, "‚úÖ Sucesso na busca de detalhes do formul√°rio da API. Nome: ${form_detail_dto.name}")
            return FormMapper.mapToDomain(form_detail_dto)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro na busca de detalhes do formul√°rio da API: ${e.message}")
            throw e
        }
    }
    
    /**
     * Envia respostas para um formul√°rio.
     * @param form_id ID do formul√°rio
     * @param answers Lista de respostas
     * @return ID da resposta enviada
     */
    override suspend fun submit_form_responses(form_id: Int, answers: List<Answer>): Int {
        Log.d(TAG, "üåê Tentando enviar respostas do formul√°rio para API... ID: $form_id, Respostas: ${answers.size}")
        try {
            val answer_dtos = FormMapper.mapToDto(answers)
            val request = FormResponseRequest(answer_dtos)
            val response_id = remote_data_source.submit_form_responses(form_id, request)
            Log.d(TAG, "‚úÖ Sucesso no envio de respostas do formul√°rio para API. Response ID: $response_id")
            return response_id
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro no envio de respostas do formul√°rio para API: ${e.message}")
            throw e
        }
    }
} 