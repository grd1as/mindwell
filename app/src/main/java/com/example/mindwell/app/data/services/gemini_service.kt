package com.example.mindwell.app.data.services

import android.content.Context
import android.util.Log
import com.example.mindwell.app.R
import com.google.ai.client.generativeai.GenerativeModel
import com.google.ai.client.generativeai.type.content
import com.google.gson.Gson
import com.google.gson.JsonSyntaxException
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Servi√ßo para integra√ß√£o com Gemini AI
 */
@Singleton
class GeminiService @Inject constructor(
    @ApplicationContext private val context: Context
) {
    private val TAG = "GeminiService"
    private val gson = Gson()
    
    private val api_key = context.getString(R.string.gemini_api_key)
    
    private val generative_model = GenerativeModel(
        modelName = "gemini-1.5-flash",
        apiKey = api_key
    )
    
    /**
     * Gera conte√∫do personalizado de recursos baseado no perfil do usu√°rio
     */
    suspend fun generate_personalized_resources(user_data: UserProfileData): Result<PersonalizedContentResponse> {
        return try {
            Log.d(TAG, "ü§ñ Gerando recursos personalizados para: ${user_data.current_mood}")
            
            val prompt = build_resources_prompt(user_data)
            
            val response = generative_model.generateContent(
                content {
                    text(prompt)
                }
            )
            
            val content = response.text ?: throw Exception("Resposta vazia do Gemini")
            Log.d(TAG, "üìù Resposta do Gemini recebida: ${content.take(200)}...")
            
            // Analisar qualidade da resposta
            GeminiDebugUtils.analyzeResponse(content, "resources")
            
            val parsed_response = parse_resources_response(content)
            
            Log.d(TAG, "‚úÖ Recursos personalizados gerados com sucesso: ${parsed_response.resources.size} recursos")
            Result.success(parsed_response)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao gerar recursos personalizados: ${e.message}", e)
            
            // Fallback para dados mock
            Log.d(TAG, "üîÑ Usando dados mock como fallback")
            val mock_response = PersonalizedContentResponse(
                resources = getMockResources(),
                personalized_message = "Baseado no seu perfil, selecionei estes recursos especialmente para voc√™ hoje. (Modo offline)"
            )
            Result.success(mock_response)
        }
    }
    
    /**
     * Gera dicas personalizadas baseadas no estado emocional atual
     */
    suspend fun generate_personalized_tips(user_data: UserProfileData): Result<List<PersonalizedTip>> {
        return try {
            Log.d(TAG, "üí° Gerando dicas personalizadas para n√≠vel de ansiedade: ${user_data.anxiety_level}")
            
            val prompt = build_tips_prompt(user_data)
            
            val response = generative_model.generateContent(
                content {
                    text(prompt)
                }
            )
            
            val content = response.text ?: throw Exception("Resposta vazia do Gemini")
            Log.d(TAG, "üìù Resposta de dicas recebida: ${content.take(150)}...")
            
            // Analisar qualidade da resposta
            GeminiDebugUtils.analyzeResponse(content, "tips")
            
            val tips = parse_tips_response(content)
            
            Log.d(TAG, "‚úÖ Dicas personalizadas geradas com sucesso: ${tips.size} dicas")
            Result.success(tips)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao gerar dicas personalizadas: ${e.message}", e)
            
            // Fallback para dados mock
            Log.d(TAG, "üîÑ Usando dicas mock como fallback")
            Result.success(getMockTips())
        }
    }
    
    private fun build_resources_prompt(user_data: UserProfileData): String {
        return """
            Voc√™ √© um assistente especializado em sa√∫de mental e bem-estar. Com base no perfil do usu√°rio abaixo, gere recursos personalizados de bem-estar.
            
            PERFIL DO USU√ÅRIO:
            - Sentimentos recentes: ${user_data.recent_feelings.joinToString(", ")}
            - N√≠vel de estresse: ${user_data.stress_level}/10
            - N√≠vel de ansiedade: ${user_data.anxiety_level}/10
            - N√≠vel de energia: ${user_data.energy_level}/10
            - Padr√µes de sono: ${user_data.sleep_pattern}
            - Atividades preferidas: ${user_data.preferred_activities.joinToString(", ")}
            - Hor√°rio atual: ${user_data.current_time}
            - Dia da semana: ${user_data.day_of_week}
            - Estado atual: ${user_data.current_mood}
            - Hist√≥rico de humor: ${user_data.mood_history}
            - Padr√µes identificados: ${user_data.patterns.joinToString(", ")}
            
            Por favor, gere 4-6 recursos personalizados no seguinte formato JSON EXATO:
            
            {
              "resources": [
                {
                  "title": "T√≠tulo claro e motivador",
                  "description": "Descri√ß√£o espec√≠fica e √∫til (m√°ximo 100 caracteres)",
                  "category": "breathing",
                  "duration_minutes": 5,
                  "difficulty": "beginner",
                  "icon": "breathing",
                  "action_text": "Come√ßar agora"
                }
              ],
              "personalized_message": "Mensagem motivadora personalizada (m√°ximo 150 caracteres)"
            }
            
            CATEGORIAS V√ÅLIDAS: breathing, meditation, exercise, sleep, journaling, mindfulness
            DIFICULDADES V√ÅLIDAS: beginner, intermediate, advanced
            √çCONES V√ÅLIDOS: breathing, meditation, exercise, sleep, writing, heart
            
            DIRETRIZES IMPORTANTES:
            - Responda APENAS com JSON v√°lido (sem explica√ß√µes antes ou depois)
            - Adapte as recomenda√ß√µes ao estado emocional atual
            - Priorize atividades apropriadas para o hor√°rio (${user_data.current_time})
            - Use linguagem acolhedora e motivadora em portugu√™s brasileiro
            - Mantenha descriptions e messages concisos
        """.trimIndent()
    }
    
    private fun build_tips_prompt(user_data: UserProfileData): String {
        return """
            Voc√™ √© um psic√≥logo especializado em bem-estar digital. Baseado no perfil emocional do usu√°rio, gere 3-4 dicas personalizadas e pr√°ticas.
            
            PERFIL EMOCIONAL:
            - Estado atual: ${user_data.current_mood}
            - N√≠vel de ansiedade: ${user_data.anxiety_level}/10
            - N√≠vel de estresse: ${user_data.stress_level}/10
            - Energia: ${user_data.energy_level}/10
            - √öltimo check-in: ${user_data.last_checkin_time}
            - Padr√µes identificados: ${user_data.patterns.joinToString(", ")}
            - Hor√°rio: ${user_data.current_time} (${user_data.day_of_week})
            
            Gere dicas no formato JSON EXATO:
            
            {
              "tips": [
                {
                  "title": "T√≠tulo da dica (m√°ximo 50 caracteres)",
                  "content": "Conte√∫do detalhado e pr√°tico (m√°ximo 200 caracteres)",
                  "category": "immediate",
                  "icon": "lightbulb",
                  "estimated_time": "2 minutos",
                  "priority": "high"
                }
              ]
            }
            
            CATEGORIAS V√ÅLIDAS: immediate, breathing, movement, mindset, planning
            √çCONES V√ÅLIDOS: lightbulb, heart, star, smile, target
            PRIORIDADES V√ÅLIDAS: high, medium, low
            
            DIRETRIZES:
            - Responda APENAS com JSON v√°lido (sem texto adicional)
            - Dicas pr√°ticas e aplic√°veis imediatamente
            - Linguagem emp√°tica e encorajadora
            - Considere o contexto temporal (${user_data.current_time})
            - Mantenha textos concisos
        """.trimIndent()
    }
    
    private fun parse_resources_response(content: String): PersonalizedContentResponse {
        return try {
            Log.d(TAG, "üîÑ Fazendo parsing da resposta de recursos...")
            
            // Limpar a resposta removendo poss√≠veis caracteres extras
            val cleanedContent = extractJsonFromResponse(content)
            Log.d(TAG, "üßπ JSON limpo: $cleanedContent")
            
            // Parse da resposta do Gemini
            val geminiResponse = gson.fromJson(cleanedContent, GeminiResourcesResponse::class.java)
            
            // Converter para formato interno
            val personalizedResources = geminiResponse.resources.map { item ->
                PersonalizedResource(
                    title = item.title,
                    description = item.description,
                    category = item.category,
                    duration_minutes = item.duration_minutes,
                    difficulty = item.difficulty,
                    icon = item.icon,
                    action_text = item.action_text
                )
            }
            
            Log.d(TAG, "‚úÖ Parsing de recursos conclu√≠do com sucesso")
            PersonalizedContentResponse(
                resources = personalizedResources,
                personalized_message = geminiResponse.personalized_message
            )
            
        } catch (e: JsonSyntaxException) {
            Log.e(TAG, "‚ùå Erro de sintaxe JSON: ${e.message}")
            Log.e(TAG, "üìÑ Conte√∫do que causou erro: $content")
            throw Exception("Formato JSON inv√°lido na resposta do Gemini")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro geral no parsing: ${e.message}")
            throw e
        }
    }
    
    private fun parse_tips_response(content: String): List<PersonalizedTip> {
        return try {
            Log.d(TAG, "üîÑ Fazendo parsing da resposta de dicas...")
            
            // Limpar a resposta
            val cleanedContent = extractJsonFromResponse(content)
            Log.d(TAG, "üßπ JSON de dicas limpo: $cleanedContent")
            
            // Parse da resposta do Gemini
            val geminiResponse = gson.fromJson(cleanedContent, GeminiTipsResponse::class.java)
            
            // Converter para formato interno
            val personalizedTips = geminiResponse.tips.map { item ->
                PersonalizedTip(
                    title = item.title,
                    content = item.content,
                    category = item.category,
                    icon = item.icon,
                    estimated_time = item.estimated_time,
                    priority = item.priority
                )
            }
            
            Log.d(TAG, "‚úÖ Parsing de dicas conclu√≠do com sucesso")
            personalizedTips
            
        } catch (e: JsonSyntaxException) {
            Log.e(TAG, "‚ùå Erro de sintaxe JSON nas dicas: ${e.message}")
            throw Exception("Formato JSON inv√°lido na resposta de dicas do Gemini")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro geral no parsing de dicas: ${e.message}")
            throw e
        }
    }
    
    /**
     * Extrai JSON v√°lido da resposta do Gemini, removendo texto explicativo
     */
    private fun extractJsonFromResponse(content: String): String {
        return try {
            // Procurar pelo primeiro { e √∫ltimo }
            val startIndex = content.indexOf("{")
            val endIndex = content.lastIndexOf("}") + 1
            
            if (startIndex != -1 && endIndex > startIndex) {
                val jsonContent = content.substring(startIndex, endIndex)
                Log.d(TAG, "üéØ JSON extra√≠do com sucesso")
                jsonContent
            } else {
                Log.w(TAG, "‚ö†Ô∏è N√£o foi poss√≠vel extrair JSON, usando conte√∫do original")
                content
            }
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è Erro ao extrair JSON: ${e.message}, usando conte√∫do original")
            content
        }
    }
    
    private fun getMockResources(): List<PersonalizedResource> {
        return listOf(
            PersonalizedResource(
                title = "Respira√ß√£o Calmante de 5 Minutos",
                description = "T√©cnica de respira√ß√£o 4-7-8 para reduzir a ansiedade e promover relaxamento",
                category = "breathing",
                duration_minutes = 5,
                difficulty = "beginner",
                icon = "breathing",
                action_text = "Come√ßar agora"
            ),
            PersonalizedResource(
                title = "Medita√ß√£o Guiada para Foco",
                description = "Sess√£o de mindfulness para melhorar concentra√ß√£o e clareza mental",
                category = "meditation",
                duration_minutes = 10,
                difficulty = "intermediate",
                icon = "meditation",
                action_text = "Meditar"
            ),
            PersonalizedResource(
                title = "Di√°rio de Gratid√£o",
                description = "Reflita sobre tr√™s coisas pelas quais voc√™ √© grato hoje",
                category = "journaling",
                duration_minutes = 8,
                difficulty = "beginner",
                icon = "writing",
                action_text = "Escrever"
            )
        )
    }
    
    private fun getMockTips(): List<PersonalizedTip> {
        return listOf(
            PersonalizedTip(
                title = "Momento de Pausa Consciente",
                content = "Fa√ßa tr√™s respira√ß√µes profundas e observe como voc√™ est√° se sentindo neste momento, sem julgamentos.",
                category = "immediate",
                icon = "lightbulb",
                estimated_time = "2 minutos",
                priority = "high"
            ),
            PersonalizedTip(
                title = "Hidrata√ß√£o Mindful",
                content = "Beba um copo d'√°gua lentamente, prestando aten√ß√£o na sensa√ß√£o e temperatura. Isso ajuda a reconectar com o presente.",
                category = "immediate",
                icon = "heart",
                estimated_time = "3 minutos",
                priority = "medium"
            )
        )
    }
}

/**
 * Dados do perfil do usu√°rio para personaliza√ß√£o
 */
data class UserProfileData(
    val recent_feelings: List<String> = emptyList(),
    val stress_level: Int = 5,
    val anxiety_level: Int = 5,
    val energy_level: Int = 5,
    val sleep_pattern: String = "normal",
    val preferred_activities: List<String> = emptyList(),
    val current_time: String = "",
    val day_of_week: String = "",
    val current_mood: String = "neutro",
    val mood_history: String = "",
    val last_checkin_time: String = "",
    val patterns: List<String> = emptyList()
)

/**
 * Resposta com conte√∫do personalizado
 */
data class PersonalizedContentResponse(
    val resources: List<PersonalizedResource>,
    val personalized_message: String
)

/**
 * Recurso personalizado gerado pelo Gemini
 */
data class PersonalizedResource(
    val title: String,
    val description: String,
    val category: String,
    val duration_minutes: Int,
    val difficulty: String,
    val icon: String,
    val action_text: String
)

/**
 * Dica personalizada gerada pelo Gemini
 */
data class PersonalizedTip(
    val title: String,
    val content: String,
    val category: String,
    val icon: String,
    val estimated_time: String,
    val priority: String
) 