package com.example.mindwell.app.data.services

import android.Manifest
import android.app.AlarmManager
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import android.util.Log
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.core.content.ContextCompat
import com.example.mindwell.app.MainActivity
import com.example.mindwell.app.R
import java.util.*

class NotificationService(private val context: Context) {
    
    companion object {
        const val NOTIFICATION_ID = 1001
        const val CHANNEL_ID = "mindwell_reminders"
        const val REMINDER_REQUEST_CODE = 1002
        const val ACTION_REMINDER = "com.example.mindwell.REMINDER"
        
        // Para teste: 5 segundos (5000ms), para produ√ß√£o: alterar conforme necess√°rio
        const val REMINDER_INTERVAL_MS = 5 * 1000L // 5 segundos para teste
        
        private const val TAG = "NotificationService"
    }
    
    private val alarm_manager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
    private val notification_manager = NotificationManagerCompat.from(context)
    
    init {
        create_notification_channel()
    }
    
    private fun create_notification_channel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "Lembretes de Check-in",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "Notifica√ß√µes para lembretes de check-in di√°rio"
                enableVibration(true)
                setShowBadge(true)
                enableLights(true)
                lightColor = android.graphics.Color.BLUE
                setBypassDnd(false)
            }
            
            val notification_manager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notification_manager.createNotificationChannel(channel)
            
            Log.d(TAG, "üì± Canal de notifica√ß√£o criado com IMPORTANCE_HIGH")
        }
    }
    
    /**
     * Verifica se temos permiss√£o para mostrar notifica√ß√µes
     */
    fun has_notification_permission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            ContextCompat.checkSelfPermission(
                context,
                Manifest.permission.POST_NOTIFICATIONS
            ) == PackageManager.PERMISSION_GRANTED
        } else {
            notification_manager.areNotificationsEnabled()
        }
    }
    
    fun start_daily_reminders() {
        if (!has_notification_permission()) {
            Log.w(TAG, "‚ùå Sem permiss√£o para notifica√ß√µes. N√£o iniciando lembretes.")
            return
        }
        
        val intent = Intent(context, ReminderBroadcastReceiver::class.java).apply {
            action = ACTION_REMINDER
        }
        
        val pending_intent = PendingIntent.getBroadcast(
            context,
            REMINDER_REQUEST_CODE,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        // Cancelar alarmes anteriores
        alarm_manager.cancel(pending_intent)
        
        // Agendar pr√≥ximo lembrete em 5 segundos
        val trigger_time = System.currentTimeMillis() + REMINDER_INTERVAL_MS
        
        try {
            alarm_manager.setRepeating(
                AlarmManager.RTC_WAKEUP,
                trigger_time,
                REMINDER_INTERVAL_MS,
                pending_intent
            )
            
            Log.d(TAG, "üîî Lembretes agendados! Pr√≥ximo em ${REMINDER_INTERVAL_MS}ms")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao agendar lembretes: ${e.message}", e)
        }
    }
    
    fun stop_daily_reminders() {
        val intent = Intent(context, ReminderBroadcastReceiver::class.java)
        val pending_intent = PendingIntent.getBroadcast(
            context,
            REMINDER_REQUEST_CODE,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        alarm_manager.cancel(pending_intent)
        notification_manager.cancel(NOTIFICATION_ID)
        
        Log.d(TAG, "üîï Lembretes cancelados")
    }
    
    fun show_reminder_notification() {
        if (!has_notification_permission()) {
            Log.w(TAG, "‚ùå Sem permiss√£o para mostrar notifica√ß√£o")
            return
        }
        
        Log.d(TAG, "üîî Mostrando notifica√ß√£o de lembrete")
        
        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            putExtra("navigate_to", "checkin") // Para navegar direto para check-in
        }
        
        val pending_intent = PendingIntent.getActivity(
            context,
            0,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_dialog_info) // Usando √≠cone padr√£o do Android
            .setContentTitle("üåü Hora do Check-in!")
            .setContentText("Como voc√™ est√° se sentindo hoje?")
            .setStyle(NotificationCompat.BigTextStyle()
                .bigText("üåü Como voc√™ est√° se sentindo hoje? Fa√ßa seu check-in di√°rio e acompanhe sua evolu√ß√£o emocional. Toque para abrir o app! üíù"))
            .setPriority(NotificationCompat.PRIORITY_HIGH) // Prioridade alta
            .setContentIntent(pending_intent)
            .setAutoCancel(true)
            .setVibrate(longArrayOf(0, 1000, 500, 1000)) // Vibra√ß√£o mais longa
            .setCategory(NotificationCompat.CATEGORY_REMINDER)
            .setDefaults(NotificationCompat.DEFAULT_ALL) // Todos os defaults (som, vibra√ß√£o, luz)
            .setOngoing(false) // Pode ser dispensada
            .setShowWhen(true) // Mostra hor√°rio
            .setWhen(System.currentTimeMillis())
            .setColor(android.graphics.Color.BLUE) // Cor azul
            .build()
        
        try {
            notification_manager.notify(NOTIFICATION_ID, notification)
            Log.d(TAG, "‚úÖ Notifica√ß√£o exibida com sucesso - ID: $NOTIFICATION_ID")
            Log.d(TAG, "üìã T√≠tulo: 'üåü Hora do Check-in!' | Texto: 'Como voc√™ est√° se sentindo hoje?'")
            
            // Log adicional para debug
            val manager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            val areEnabled = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                manager.areNotificationsEnabled()
            } else {
                true
            }
            Log.d(TAG, "üîç Notifica√ß√µes habilitadas no sistema: $areEnabled")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao exibir notifica√ß√£o: ${e.message}", e)
        }
    }
    
    /**
     * Fun√ß√£o de teste para verificar se notifica√ß√µes funcionam
     */
    fun show_test_notification() {
        if (!has_notification_permission()) {
            Log.w(TAG, "‚ùå Sem permiss√£o para notifica√ß√£o de teste")
            return
        }
        
        Log.d(TAG, "üß™ Exibindo notifica√ß√£o de TESTE")
        
        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_dialog_alert)
            .setContentTitle("üß™ TESTE - MindWell")
            .setContentText("Se voc√™ v√™ isso, as notifica√ß√µes funcionam!")
            .setPriority(NotificationCompat.PRIORITY_MAX) // Prioridade m√°xima
            .setDefaults(NotificationCompat.DEFAULT_ALL)
            .setAutoCancel(true)
            .setVibrate(longArrayOf(0, 2000, 1000, 2000)) // Vibra√ß√£o bem longa
            .build()
        
        try {
            notification_manager.notify(999, notification) // ID diferente
            Log.d(TAG, "‚úÖ Notifica√ß√£o de TESTE enviada com ID: 999")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro na notifica√ß√£o de teste: ${e.message}", e)
        }
    }
}

/**
 * BroadcastReceiver que recebe os alarmes e exibe as notifica√ß√µes
 */
class ReminderBroadcastReceiver : BroadcastReceiver() {
    override fun onReceive(context: Context, intent: Intent) {
        Log.d("ReminderBroadcastReceiver", "üö® Alarme recebido! Action: ${intent.action}")
        
        if (intent.action == NotificationService.ACTION_REMINDER) {
            val checkin_manager = CheckinManager(context)
            
            // S√≥ mostra notifica√ß√£o se ainda n√£o fez check-in hoje
            if (!checkin_manager.has_checked_in_today()) {
                Log.d("ReminderBroadcastReceiver", "‚úÖ Pode mostrar notifica√ß√£o - ainda n√£o fez check-in hoje")
                val notification_service = NotificationService(context)
                notification_service.show_reminder_notification()
            } else {
                Log.d("ReminderBroadcastReceiver", "‚è≠Ô∏è Pulando notifica√ß√£o - j√° fez check-in hoje")
            }
        }
    }
} 